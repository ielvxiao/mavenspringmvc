<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
               ">

    <!-- scanner redis properties  -->
    <context:property-placeholder location="classpath*:property/redis.properties" ignore-unresolvable="true"/>

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <!--最大连接数-->
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <!--最大等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <!--当调用borrow Object方法时，是否进行有效性检查-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <!--最小能够保持idel状态的对象数  -->
        <property name="minIdle" value="${redis.minIdle}"/>
        <!--当调用return Object方法时，是否进行有效性检查-->
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
        <!--“空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"/>
        <!--向调用者输出“链接”对象时，是否检测它的空闲超时；-->
        <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
        <!--对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3.-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"/>
    </bean>


    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>
        <constructor-arg name="poolConfig" ref="poolConfig"/>
    </bean>

    <bean id="redisClusterConfiguration"
          class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="3"/>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster0.address}"/>
                    <constructor-arg name="port" value="${redis.cluster0.port}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster1.address}"/>
                    <constructor-arg name="port" value="${redis.cluster1.port}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster2.address}"/>
                    <constructor-arg name="port" value="${redis.cluster2.port}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster3.address}"/>
                    <constructor-arg name="port" value="${redis.cluster3.port}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster4.address}"/>
                    <constructor-arg name="port" value="${redis.cluster4.port}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster5.address}"/>
                    <constructor-arg name="port" value="${redis.cluster5.port}"/>
                </bean>
            </set>
        </property>
    </bean>
    <!-- redis操作模板，面向对象的模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <bean id="redisCacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="com.example.cache.RedisCache" id="userCache">
                    <property name="name" value="User"/>
                    <property name="redisTemplate" ref="redisTemplate"/>
                    <property name="timeout" value="6000"/>
                </bean>
                <bean class="com.example.cache.RedisCache" id="employeeCache">
                    <property name="name" value="Employee"/>
                    <property name="redisTemplate" ref="redisTemplate"/>
                    <property name="timeout" value="600"/>
                </bean>
            </set>
        </property>
    </bean>

    <!--设置自增长id-->
    <bean id="redisAtomicLong" class="org.springframework.data.redis.support.atomic.RedisAtomicLong">
        <constructor-arg name="redisCounter" value="someKey"/>
        <constructor-arg name="factory" ref="connectionFactory"/>
    </bean>

</beans>